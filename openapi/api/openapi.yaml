openapi: 3.0.3
info:
  title: A szállítók - OpenAPI 3.0
  description: API documentation for the backend of The Transporters project
  termsOfService: TODO
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 3.0.0
servers:
- url: /
security:
- bearerAuth: []
tags:
- name: user
  description: Informations about the users
- name: vehicle
  description: Informations about supllier users' vehicles
- name: delivery
  description: Informations about deliveries
paths:
  /user:
    get:
      tags:
      - user
      summary: Get all users
      description: Get all users
      operationId: getUsers
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                x-content-type: application/json
      x-swagger-router-controller: User
    post:
      tags:
      - user
      summary: Add a new users' profile
      description: Add a new users' profile
      operationId: addUser
      requestBody:
        description: Add a new users' profile to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Bad Request
      x-swagger-router-controller: User
  /user/{ID}:
    get:
      tags:
      - user
      summary: Find user by ID
      description: Returns a single user
      operationId: getUserById
      parameters:
      - name: ID
        in: path
        description: ID of user to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
      x-swagger-router-controller: User
    put:
      tags:
      - user
      summary: Update an existing users' profile
      description: Update an existing users' profile by UID
      operationId: updateUser
      parameters:
      - name: ID
        in: path
        description: ID of user to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Update an existent user in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "405":
          description: Invalid input
      x-swagger-router-controller: User
    delete:
      tags:
      - user
      summary: Delete user by ID
      description: Delete a single user
      operationId: delUserById
      parameters:
      - name: ID
        in: path
        description: ID of user to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
      x-swagger-router-controller: User
  /user/{ID}/history:
    get:
      tags:
      - user
      summary: Returns a user's delivery history
      description: Returns a user's delivery history
      operationId: deliveryHistory
      parameters:
      - name: ID
        in: path
        description: ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/JobDetails'
        "400":
          description: Invalid ID supplied
        "404":
          description: Delivery not found
      x-swagger-router-controller: Delivery
  /user/{ID}/promote:
    post:
      tags:
      - user
      summary: Promote user by id
      description: Promote user to admin role
      operationId: promUserById
      parameters:
      - name: ID
        in: path
        description: ID of user to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid ID supplied
        "403":
          description: You're not an admin
        "404":
          description: User not found
      x-swagger-router-controller: User
  /user/toplist:
    get:
      tags:
      - user
      summary: Find user by ID
      description: Returns a single user
      operationId: getUserToplist
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInToplist'
                x-content-type: application/json
      x-swagger-router-controller: User
  /vehicle/{ID}:
    get:
      tags:
      - vehicle
      summary: Find a vehicle by ID
      description: Returns a single vehicle
      operationId: getVehicleById
      parameters:
      - name: ID
        in: path
        description: ID of the vehicle to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        "400":
          description: Invalid ID supplied
        "404":
          description: Vehicle not found
      x-swagger-router-controller: Vehicle
    put:
      tags:
      - vehicle
      summary: Update an existing vehicle
      description: Update an existing vehicle
      operationId: updateVehicle
      parameters:
      - name: ID
        in: path
        description: ID of the vehicle to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Update an existent vehicle in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        "400":
          description: Invalid input
      x-swagger-router-controller: Vehicle
  /vehicle:
    post:
      tags:
      - vehicle
      summary: Add a new vehicle
      description: Add a new vehicle
      operationId: addVehicle
      requestBody:
        description: Add a new vehicle to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        "400":
          description: Invalid input
      x-swagger-router-controller: Vehicle
  /delivery:
    get:
      tags:
      - delivery
      parameters:
        - in: query
          name: status
          required: false
          schema:
            type: string
          description: Filter on status
        - in: query
          name: sourceCity
          required: false
          schema:
            type: string
          description: Filter on source city
        - in: query
          name: destinationCity
          required: false
          schema:
            type: string
          description: Filter on destination city
        - in: query
          name: price
          required: false
          schema:
            type: string
          description: Filter on price
        - in: query
          name: date
          required: false
          schema:
            type: string
          description: Filter on date; returns deliveries where the pickUpFrom is less and the pickUpUntil is bigger than the input date
      summary: Get all deliveries
      description: Returns all deliveries
      operationId: getDelivery
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Delivery'
                x-content-type: application/json
      x-swagger-router-controller: Delivery
    post:
      tags:
      - delivery
      summary: Add a new delivery
      description: Add a new delivery
      operationId: addDelivery
      requestBody:
        description: Add a new ddelivery to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Delivery'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
        "400":
          description: Invalid input
      x-swagger-router-controller: Delivery
  /delivery/{ID}:
    get:
      tags:
      - delivery
      summary: Find a delivery by ID
      description: Returns a single delivery
      operationId: getDeliveryById
      parameters:
      - name: ID
        in: path
        description: ID of the delivery to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
        "400":
          description: Invalid ID supplied
        "404":
          description: Delivery not found
      x-swagger-router-controller: Delivery
    put:
      tags:
      - delivery
      summary: Update an existing delivery
      description: Update an existing delivery
      operationId: updateDelivery
      parameters:
      - name: ID
        in: path
        description: ID of the delivery to edit
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Update an existent delivery in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Delivery'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
        "400":
          description: Invalid input
      x-swagger-router-controller: Delivery
    delete:
      tags:
      - delivery
      summary: Delete a delivery by ID
      description: Delete a single delivery
      operationId: delDeliveryById
      parameters:
      - name: ID
        in: path
        description: ID of the delivery to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
        "400":
          description: Invalid ID supplied
        "404":
          description: Delivery not found
      x-swagger-router-controller: Delivery
  /delivery/{ID}/rateTransporter:
    put:
      tags:
      - delivery
      summary: Rate the transporter of the delivery
      description: Rate the transporter of the delivery
      operationId: rateTransporter
      parameters:
      - name: ID
        in: path
        description: ID of the delivery to edit
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: The rating of the transporter
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  format: int64
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
        "400":
          description: Invalid input
        "403":
          description: Only the client can rate the transporter
      x-swagger-router-controller: Delivery
  /delivery/{ID}/rateClient:
    put:
      tags:
      - delivery
      summary: Rate the client of the delivery
      description: Rate the client of the delivery
      operationId: rateClient
      parameters:
      - name: ID
        in: path
        description: ID of the delivery to edit
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: The rating of the client
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  format: int64
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
        "400":
          description: Invalid input
        "403":
          description: Only the transporter can rate the client
      x-swagger-router-controller: Delivery
  /delivery/{ID}/jobDetails:
    get:
      tags:
      - delivery
      summary: Returns with a jobs' detals
      description: Returns with a jobs' detals
      operationId: jobDetails
      parameters:
      - name: ID
        in: path
        description: ID of the delivery to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDetails'
        "400":
          description: Invalid ID supplied
        "404":
          description: Delivery not found
      x-swagger-router-controller: Delivery
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        googletoken:
          type: string
          example: U2314251234234
        phoneNumber:
          type: string
          example: "12345"
        vehicleId:
          type: integer
          format: int64
          example: 4
        isAdmin:
          type: boolean
          example: false
        profilePictureUrl:
          type: string
          example: files:///defaultImage.png
      example:
        profilePictureUrl: files:///defaultImage.png
        firstName: John
        lastName: James
        googletoken: U2314251234234
        phoneNumber: "12345"
        id: 10
        vehicleId: 4
        isAdmin: false
        email: john@email.com
      xml:
        name: user
    UserInToplist:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        deliveriesCompleted:
          type: number
          example: 10
        moneyEarned:
          type: number
          example: 100000
      example:
        firstName: John
        lastName: James
        moneyEarned: 100000
        deliveriesCompleted: 10
        id: 10
    Vehicle:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        plateNumber:
          type: string
          example: AD0000
        type:
          type: string
          example: Volkswagen Transporter
        yearOfManufacturing:
          type: integer
          format: int64
          example: 2008
        location:
          type: string
          example: Telephely
        maxWeight:
          type: integer
          format: int64
          example: 2
        maxHeight:
          type: integer
          format: int64
          example: 2
        maxLength:
          type: integer
          format: int64
          example: 2
        maxWidth:
          type: integer
          format: int64
          example: 2
        pictureUrl:
          type: string
          example: file:///defaultImage.png
      example:
        maxHeight: 2
        pictureUrl: file:///defaultImage.png
        yearOfManufacturing: 2008
        location: Telephely
        id: 10
        maxWeight: 2
        plateNumber: AD0000
        type: Volkswagen Transporter
        maxLength: 2
        maxWidth: 2
    Delivery:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        title:
          type: string
          example: Brick delivery
        description:
          type: string
          example: Please deliver it!
        sourceLocation:
          $ref: '#/components/schemas/Location'
        destinationLocation:
          $ref: '#/components/schemas/Location'
        clientUserId:
          type: integer
          format: int64
          example: 2
        transporterUserId:
          type: integer
          format: int64
          example: 2
        pickUpFrom:
          type: object
          format: dateTime
          example: 2022.10.10
        pickUpUntil:
          type: object
          format: dateTime
          example: 2022.10.20
        price:
          type: integer
          format: int6
          example: 10000
        clientRating:
          type: integer
          format: int64
          example: 2
        transporterRating:
          type: integer
          format: int64
          example: 2
        weight:
          type: integer
          format: int64
          example: 2
        height:
          type: integer
          format: int64
          example: 2
        length:
          type: integer
          format: int64
          example: 2
        width:
          type: integer
          format: int64
          example: 2
        status:
          type: string
          example: DONE
        pictureUrl:
          type: string
          example: file:///defaultImage.png
        createdAt:
          type: object
          format: dateTime
          example: 2022.10.10
        updatedAt:
          type: object
          format: dateTime
          example: 2022.10.20
      example:
        clientUserId: 2
        transporterUserId: 2
        pictureUrl: file:///defaultImage.png
        length: 2
        description: Please deliver it!
        destinationLocation: null
        weight: 2
        title: Brick delivery
        createdAt: 2022.10.10
        clientRating: 2
        pickUpUntil: 2022.10.20
        price: 10000
        width: 2
        sourceLocation:
          country: Hungary
          coordinate:
            latitude: -19.47381
            longitude: 14.45529
          address: Irinyi József utca 42
          city: Budapest
          postalCode: 1117
        transporterRating: 2
        id: 2
        pickUpFrom: 2022.10.10
        height: 2
        status: DONE
        updatedAt: 2022.10.20
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
    Coordinate:
      type: object
      properties:
        longitude:
          type: number
          example: 14.45529
        latitude:
          type: number
          example: -19.47381
      example:
        latitude: -19.47381
        longitude: 14.45529
    Location:
      type: object
      properties:
        coordinate:
          $ref: '#/components/schemas/Coordinate'
        country:
          type: string
          example: Hungary
        postalCode:
          type: integer
          format: int64
          example: 1117
        city:
          type: string
          example: Budapest
        address:
          type: string
          example: Irinyi József utca 42
      example:
        country: Hungary
        coordinate:
          latitude: -19.47381
          longitude: 14.45529
        address: Irinyi József utca 42
        city: Budapest
        postalCode: 1117
    JobDetails:
      type: object
      properties:
        name:
          type: string
          description: Client's name
          example: "John Doe"
        imPaths:
          type: string
          description: Client's image's url
          example: "file//"
        avgRating:
          type: number
          description: Client's average rating
          example: 4.5
        deliveryDate:
          type: object
          description: Deivery's date
          example: "022.10.10."
        deliveryCost:
          type: integer
          description: Deivery's cost
          example: 10000
        deliveryLocation:
          $ref: '#/components/schemas/Location'
  requestBodies:
    User:
      description: User object that needs to be added to the database
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
                format: int64
                example: 10
              firstName:
                type: string
                example: John
              lastName:
                type: string
                example: James
              email:
                type: string
                example: john@email.com
              googletoken:
                type: string
                example: U2314251234234
              phoneNumber:
                type: string
                example: "12345"
              vehicleId:
                type: integer
                format: int64
                example: 4
              isAdmin:
                type: boolean
                example: false
              profilePictureUrl:
                type: string
                example: files:///defaultImage.png
            xml:
              name: user
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 10
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: James
                email:
                  type: string
                  example: john@email.com
                googletoken:
                  type: string
                  example: U2314251234234
                phoneNumber:
                  type: string
                  example: "12345"
                vehicleId:
                  type: integer
                  format: int64
                  example: 4
                isAdmin:
                  type: boolean
                  example: false
                profilePictureUrl:
                  type: string
                  example: files:///defaultImage.png
              xml:
                name: user
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
