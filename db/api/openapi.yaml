openapi: 3.0.3
info:
  title: A szállítók - OpenAPI 3.0
  description: API documentation for the backend of The Transporters project
  termsOfService: TODO
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 3.0.0
tags:
  - name: user
    description: Informations about the users
  - name: vehicle
    description: Informations about supllier users' vehicles
  - name: delivery
    description: Informations about deliveries
  - name: rating
    description: Informations about ratings
  - name: coordinate
    description: Informations about coordinates
  - name: capacity
    description: Informations about capacities
  - name: deliverytouser
    description: Informations about deliverytousers
paths:
  /user:
    get:
      tags:
        - user
      summary: Get all users
      description: Get all users
      operationId: getUsers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - user
      summary: Add a new users' profile
      description: Add a new users' profile
      operationId: addUser
      requestBody:
        description: Add a new users' profile to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
  /user/{ID}:
    get:
      tags:
        - user
      summary: Find user by ID
      description: Returns a single user
      operationId: getUserById
      parameters:
        - name: ID
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update an existing users' profile
      description: Update an existing users' profile by UID
      operationId: updateUser
      parameters:
        - name: ID
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent user in the database
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '405':
          description: Invalid input
    delete:
      tags:
        - user
      summary: Delete user by ID
      description: Delete a single user
      operationId: delUserById
      parameters:
        - name: ID
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
  /user/{ID}/promote:
    post:
      tags:
        - user
      summary: Promote user by id
      description: Promote user to admin role
      operationId: promUserById
      parameters:
        - name: ID
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '403':
          description: You're not an admin
        '404':
          description: User not found
  /user/toplist:
    get:
      tags:
        - user
      summary: Find user by ID
      description: Returns a single user
      operationId: getUserToplist
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInToplist'
          
  /vehicle/{ID}:
    get:
      tags:
        - vehicle
      summary: Find a vehicle by ID
      description: Returns a single vehicle
      operationId: getVehicleById
      parameters:
        - name: ID
          in: path
          description: ID of the vehicle to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '400':
          description: Invalid ID supplied
        '404':
          description: Vehicle not found
    put:
      tags:
        - vehicle
      summary: Update an existing vehicle
      description: Update an existing vehicle
      operationId: updateVehicle
      parameters:
        - name: ID
          in: path
          description: ID of the vehicle to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent vehicle in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '400':
          description: Invalid input
  /vehicle:
    post:
      tags:
        - vehicle
      summary: Add a new vehicle
      description: Add a new vehicle
      operationId: addVehicle
      requestBody:
        description: Add a new vehicle to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '400':
          description: Invalid input
  
  /delivery:
    get:
      tags:
        - delivery
      summary: Get all deliveries
      description: Returns all deliveries
      operationId: getDelivery
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Delivery'
    post:
      tags:
        - delivery
      summary: Add a new delivery
      description: Add a new delivery
      operationId: addDelivery
      requestBody:
        description: Add a new ddelivery to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Delivery'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
        '400':
          description: Invalid input
  /delivery/{ID}:
    get:
      tags:
        - delivery
      summary: Find a delivery by ID
      description: Returns a single delivery
      operationId: getDeliveryById
      parameters:
        - name: ID
          in: path
          description: ID of the delivery to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
        '400':
          description: Invalid ID supplied
        '404':
          description: Delivery not found
    put:
      tags:
        - delivery
      summary: Update an existing delivery
      description: Update an existing delivery
      operationId: updateDelivery
      parameters:
        - name: ID
          in: path
          description: ID of the delivery to edit
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent delivery in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Delivery'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
        '400':
          description: Invalid input
    delete:
      tags:
          - delivery
      summary: Delete a delivery by ID
      description: Delete a single delivery
      operationId: delDeliveryById
      parameters:
        - name: ID
          in: path
          description: ID of the delivery to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
        '400':
          description: Invalid ID supplied
        '404':
          description: Delivery not found
  /rating:
    post:
      tags:
        - rating
      summary: Add a new rating
      description: Add a new rating
      operationId: addRating
      requestBody:
        description: Add a new rating to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
        '400':
          description: Invalid input
  /rating/{ID}:
    get:
      tags:
        - rating
      summary: Find rating by ID
      description: Returns a single rating
      operationId: getRatingById
      parameters:
        - name: ID
          in: path
          description: ID of rating to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
        '400':
          description: Invalid ID supplied
        '404':
          description: Rating not found
    put:
      tags:
        - rating
      summary: Update an existing rating
      description: Update an existing rating
      operationId: updateRating
      parameters:
        - name: ID
          in: path
          description: ID of rating to edit
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent rating in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Rating'
        '400':
          description: Invalid input
  /coordinate:
    post:
      tags:
        - coordinate
      summary: Add a new coordinate
      description: Add a new coordinate
      operationId: addCoordinate
      requestBody:
        description: Add a new coordinate to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Coordinate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coordinate'
        '400':
          description: Invalid input
  /coordinate/{ID}:
    get:
      tags:
        - coordinate
      summary: Find coordinate by ID
      description: Returns a single coordinate
      operationId: getCoordinateById
      parameters:
        - name: ID
          in: path
          description: ID of coordinate to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coordinate'
        '400':
          description: Invalid ID supplied
        '404':
          description: Coordinate not found
    put:
      tags:
        - coordinate
      summary: Update an existing coordinate
      description: Update an existing coordinate
      operationId: updateCoordinate
      parameters:
        - name: ID
          in: path
          description: ID of coordinate to edit
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent coordinate in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Coordinate'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coordinate'
        '400':
          description: Invalid input
  /capacity:
    post:
      tags:
        - capacity
      summary: Add a new capacity
      description: Add a new capacity
      operationId: addCapacity
      requestBody:
        description: Add a new capacity to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Capacity'
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 5
                weight:
                  type: integer
                  format: int64
                  example: 20
                height:
                  type: integer
                  format: int64
                  example: 1
                length:
                  type: integer
                  format: int64
                  example: 3
                width:
                  type: integer
                  format: int64
                  example: 2
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Capacity'
        '400':
          description: Invalid input
  /capacity/{ID}:
    get:
      tags:
        - capacity
      summary: Find capacity by ID
      description: Returns a single capacity
      operationId: getCapacityById
      parameters:
        - name: ID
          in: path
          description: ID of capacity to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Capacity'
        '400':
          description: Invalid ID supplied
        '404':
          description: Capacity not found
    put:
      tags:
        - capacity
      summary: Update an existing capacity
      description: Update an existing capacity
      operationId: updateCapacity
      parameters:
        - name: ID
          in: path
          description: ID of capacity to edit
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent capacity in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Capacity'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Capacity'
        '400':
          description: Invalid input
  /deliverytouser:
    post:
      tags:
        - deliverytouser
      summary: Add a new deliverytouser
      description: Add a new deliverytouser
      operationId: addDeliveryToUser
      requestBody:
        description: Add a new capacity to the deliverytouser
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeliveryToUser'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryToUser'
        '400':
          description: Invalid input
    put:
      tags:
        - deliverytouser
      summary: Update an existing deliverytouser
      description: Update an existing deliverytouser
      operationId: updateDeliveryToUser
      requestBody:
        description: Update an existent capacity in the deliverytouser
        content:
          application/json:
            schema:
               $ref: '#/components/schemas/DeliveryToUser'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/DeliveryToUser'
        '400':
          description: Invalid input
  /deliverytouser/bydeliveryid/{ID}:
    get:
      tags:
        - deliverytouser
      summary: Find deliverytouser by delivery ID
      description: Returns a single deliverytouser
      operationId: getDeliveryToUserByDeliveryId
      parameters:
        - name: ID
          in: path
          description: ID of deliverytouser to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/DeliveryToUser'
        '400':
          description: Invalid ID supplied
        '404':
          description: DeliveryToUser not found
  /deliverytouser/byuserid/{ID}:
    get:
      tags:
        - deliverytouser
      summary: Find deliverytouser by user ID
      description: Returns a single deliverytouser
      operationId: getDeliveryToUserByUserId
      parameters:
        - name: ID
          in: path
          description: ID of deliverytouser to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/DeliveryToUser'
        '400':
          description: Invalid ID supplied
        '404':
          description: DeliveryToUser not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        googletoken:
          type: string
          example: U2314251234234
        phoneNumber:
          type: string
          example: '12345'
        vehicleId:
          type: integer
          format: int64
          example: 4
        isAdmin:
          type: boolean
          example: false
        profilePictureUrl:
          type: string
          example: files:///defaultImage.png
      xml:
        name: user
    UserInToplist:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        deliveriesCompleted:
          type: number
          example: 10
        moneyEarned:
          type: number
          example: 100000
    Vehicle:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        plateNumber:
          type: string
          example: AD0000
        type:
          type: string
          example: Volkswagen Transporter
        yearOfManufacturing:
          type: integer
          format: int64
          example: 2008
        capacityId:
          type: integer
          format: int64
          example: 2
        locationId:
          type: integer
          format: int64
          example: 2
        pictureUrl:
          type: string
          example: file:///defaultImage.png
    Delivery:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        title:
          type: string
          example: Brick delivery
        description:
          type: string
          example: Please deliver it!
        sourceCoord:
          type: object
          properties:
            longitude:
              type: number
              example: 14.45529
            latitude:
              type: number
              example: -19.47381
        destinationCoord:
          type: object
          properties:
            longitude:
              type: number
              example: -19.47381
            latitude:
              type: number
              example: 14.45529
        pickUpFrom:
          type: object
          format: dateTime
          example: 2022.10.10
        pickUpUntil:
          type: object
          format: dateTime
          example: 2022.10.20
        price:
          type: integer
          format: int6
          example: 10000
        capacityId:
          type: integer
          format: int6
          example: 4
        status:
          type: object
          format: DeliveryStatus
        pictureUrl:
          type: string
          example: file:///defaultImage.png
        createdAt:
          type: object
          format: dateTime
          example: 2022.10.10
        updatedAt:
          type: object
          format: dateTime
          example: 2022.10.20
    DeliveryToUser:
      type: object
      properties:
        deliveryId:
          type: integer
          format: int64
          example: 5
        userId:
          type: integer
          format: int64
          example: 5
        status:
          type: integer
          format: int64
          example: 5
        updatedTime:
          type: object
          format: dateTime
          example: 2022.10.20
    Capacity:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 5
        weight:
          type: integer
          format: int64
          example: 20
        height:
          type: integer
          format: int64
          example: 1
        length:
          type: integer
          format: int64
          example: 3
        width:
          type: integer
          format: int64
          example: 2
    Coordinate:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        longitude:
          type: number
          format: float
          example: 3.32
        latitude:
          type: number
          format: float
          example: 2.12
    Rating:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        deliveryId:
          type: integer
          format: int64
          example: 2
        ratedUserId:
          type: integer
          format: int64
          example: 2
        raterUserId:
          type: integer
          format: int64
          example: 2
        rating:
          type: number
          format: int64
          example: 5
        createdAt:
          type: object
          format: dateTime
          example: 2022.10.10
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    User:
      description: User object that needs to be added to the database
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
                format: int64
                example: 10
              firstName:
                type: string
                example: John
              lastName:
                type: string
                example: James
              email:
                type: string
                example: john@email.com
              googletoken:
                type: string
                example: U2314251234234
              phoneNumber:
                type: string
                example: '12345'
              vehicleId:
                type: integer
                format: int64
                example: 4
              isAdmin:
                type: boolean
                example: false
              profilePictureUrl:
                type: string
                example: files:///defaultImage.png
            xml:
              name: user
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 10
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: James
                email:
                  type: string
                  example: john@email.com
                googletoken:
                  type: string
                  example: U2314251234234
                phoneNumber:
                  type: string
                  example: '12345'
                vehicleId:
                  type: integer
                  format: int64
                  example: 4
                isAdmin:
                  type: boolean
                  example: false
                profilePictureUrl:
                  type: string
                  example: files:///defaultImage.png
              xml:
                name: user
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT 
security:
  - bearerAuth: []
      