//// -- LEVEL 1
//// -- Schemas, Tables and References

// Creating tables
// You can define the tables with full schema names
Table User {
  id int [pk]
  firstName varchar
  lastName  varchar
  googleToken varchar
  email varchar
  phoneNumber varchar
  vehicleId int
  isAdmin boolean
  profilePictureUrl varchar
}

Table DeliveryToUser {
  deliveryId int [pk]
  userId int [pk]
  status int
  updatedAt datetime
}

// If schema name is omitted, it will default to "public" schema.
Table Delivery {
  id int [pk, increment] // auto-increment
  title varchar
  description varchar
  sourceCoordId int
  destinationCoordId int
  clientUserId int
  transporterUserId int
  pickUpFrom datetime
  pickUpUntil datetime
  price int
  capacityId int
  status DeliveryStatus
  pictureUrl varchar
  createdAt datetime
  updatedAt datetime
}

Table Capacity {
  id int [pk, increment]
  weight int
  height int
  length int
  width int
}

Table Coordinate {
  id int [pk, increment]
  longitude int
  latitude int
}

Table Rating {
  id int [pk, increment]
  deliveryId int
  ratedUserId int
  raterUserID int
  rating int
  createdAt datetime
 }
 
Table Vehicle {
  id int [pk, increment]
  plateNumber varchar
  type varchar
  yearOfManufacturing int
  capacityId int
  location varchar
  pictureUrl varchar
 }

// Creating references
// You can also define relaionship separately
// > many-to-one; < one-to-many; - one-to-one; <> many-to-many

Ref: Vehicle.id - User.vehicleId
Ref: User.id < DeliveryToUser.userId
Ref: Delivery.id < DeliveryToUser.deliveryId
Ref: Delivery.id < Rating.deliveryId
Ref: User.id < Rating.raterUserID
Ref: User.id < Rating.ratedUserId
Ref: Capacity.id - Delivery.capacityId
Ref: Capacity.id - Vehicle.capacityId
Ref: Coordinate.id - Delivery.sourceCoordId
Ref: Coordinate.id - Delivery.destinationCoordId
Ref: Delivery.clientUserId < User.id
Ref: Delivery.transporterUserId < User.id